import streamlit as st
from datetime import date
from plots import *





#Layout da P√°gina
st.set_page_config(page_title="Compara√ß√£o de A√ß√µes", layout="wide", page_icon="üìä")


#Configura√ß√£o da barra lateral
with st.sidebar:
    st.subheader("**Compara√ß√£o de A√ß√µes**", help="P√°gina de compara√ß√£o de a√ß√µes",anchor="sidebar")
    #st.markdown(":blue[**Configura√ß√µes das Visualiza√ß√µes**]", help="Selecione as empresas e o intervalo\
    #            \n de datas que gostaria de visualizar")
    st.markdown(":blue[**Selecione o tipo de An√°lise**]", help="Escolha abaixo o tipo de an√°lise")
    with st.expander("**Sele√ß√£o da Visualiza√ß√£o**"):
        tipo = st.radio(":blue[Selecione o tipo de visualiza√ß√£o]", ("Gr√°ficos de Velas", 
                                    "Tend√™ncia de Pre√ßo", "Varia√ß√£o", "Volume de Negocia√ß√µes", "Bandas de Bollinger"), 
                        index=0, help="Selecione o tipo de gr√°fico que gostaria de visualizar")
            
    with st.expander("**Sele√ß√£o de empresas e datas**", expanded=True):
        empresas = ["Tesla", "General Motors", "Ford", "Toyota", "Volkswagen", "BYD"] #Lista de empresas disponibilizadas para an√°lise
        empresa_selecionada = st.selectbox("Selecione a primeira empresa que gostaria de comparar ", empresas, index=0)
        empresa_selecionada_2 = st.selectbox("Selecione a segunda empresa que gostaria de comparar", empresas, index=1)
        data_inicio = st.date_input("Insira a data Inicial", date(2025, 3,26))        
        data_final = st.date_input("Insira a data Final", date.today()) 
    visualizar = st.button("Visualizar")

try:    
    dados1 = Gerador_de_graficos(data_inicio, data_final, empresa_selecionada)
    dados2 = Gerador_de_graficos(data_inicio, data_final, empresa_selecionada_2)
    dados1, medias_moveis1, variacao_perc1 = dados1.Gerador_de_calculos()
    dados2, medias_moveis2, variacao_perc2 = dados2.Gerador_de_calculos()
    if empresa_selecionada == empresa_selecionada_2:
            st.error("As empresas selecionadas s√£o iguais, por favor selecione empresas diferentes para compara√ß√£o", icon="üö®")
    if visualizar and tipo== "Gr√°ficos de Velas":        
        grafico1 = Grafico_velas(dados1)
        grafico2 = Grafico_velas(dados2)        
     
        st.header(f"Compara√ß√£o entre as a√ß√µes das empresas - {empresa_selecionada} e {empresa_selecionada_2}", divider="green")           
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"<div style='font-size: 22px; font-weight: bold'>A√ß√µes da Empresa: {empresa_selecionada}", unsafe_allow_html=True)
            st.plotly_chart(grafico1, use_container_width=True)
        with col2:                    
            st.markdown(f"<div style='font-size: 22px; font-weight: bold'>A√ß√µes da Empresa: {empresa_selecionada_2}", unsafe_allow_html=True)
            st.plotly_chart(grafico2, use_container_width=True)

        st.markdown("<div style='font-size: 35px; font-weight: bold; color: #026d04'>Identifica√ß√£o de Oportunidades</div>", unsafe_allow_html=True)
        st.markdown("<hr style='border: 1px solid #026d04'>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 25px; font-weight: bold'>Compare facilmente as oscila√ß√µes no mercado financeiro.</div>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 21px; font-weight: serif'>Os dias com maiores varia√ß√µes positivas e negativas \
                    (destacados em verde e vermelho) ajudam a identificar momentos cruciais de compra e venda.\
                    Essas informa√ß√µes s√£o muito valiosas para estrat√©gias de investimento baseadas em dados hist√≥ricos\
                    e essenciais para investidores que desejam avaliar os potenciais riscos antes de realizar um investimento.</div>", unsafe_allow_html=True) 

    if visualizar and tipo == "Tend√™ncia de Pre√ßo":
        st.header(f"Compara√ß√£o da Tend√™ncia de Pre√ßo das empresas - {empresa_selecionada} e {empresa_selecionada_2}", divider="blue")
        
        col1, col2 = st.columns(2)
        with col1:            
            grafico_medias_moveis = Grafico_linhas_tendencia(medias_moveis1) #Gr√°fico de M√©dias M√≥veis (1¬™ empresa)
            grafico_medias_moveis.update_layout(title=f"Tend√™ncia de pre√ßo da empresa: {empresa_selecionada} ",
                                                 xaxis_title="Data", yaxis_title="Valor das A√ß√µes", 
                                        yaxis=(dict(titlefont=dict(size=17), tickformat=",.2f")))
            grafico_medias_moveis.update_traces(text="Data",  textposition="middle center", hovertemplate="Valor das A√ß√µes: %{y}<br>Data: %{x}")
            st.markdown("<div style='font-size: 22px; font-weight: bold'>Identifique a tend√™ncia", unsafe_allow_html=True)                                
            st.plotly_chart(grafico_medias_moveis, use_container_width=True)  

        with col2:
            grafico_medias_moveis2 = Grafico_linhas_tendencia(medias_moveis2 ) #Gr√°fico de M√©dias M√≥veis (2¬™ empresa)
            grafico_medias_moveis2.update_layout(title=f"Tend√™ncia de pre√ßo da empresa {empresa_selecionada_2} ",
                                                  xaxis_title="Data", yaxis_title="Valor das A√ß√µes", 
                                        yaxis=(dict(titlefont=dict(size=19), tickformat=",.2f")))
            grafico_medias_moveis2.update_traces(text="Data", textposition="middle center", hovertemplate="Valor das A√ß√µes: %{y}<br>Data: %{x}")
            st.markdown("<div style='font-size: 22px; font-weight: bold'>Identifique a tend√™ncia", unsafe_allow_html=True)
            st.plotly_chart(grafico_medias_moveis2, use_container_width=True)
        st.markdown("<div style='font-size: 35px; font-weight:bold; color: #07B8FB'>Identifica√ß√£o da Tend√™ncia</div>", unsafe_allow_html=True)
        st.markdown("<hr style='border: 1px solid #07B8FB'>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 25px; font-weight: bold'>Identifique e compare facilmente a tend√™ncia de pre√ßos.</div>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 20px; font-weight: serif'> Estes gr√°ficos suavizam as oscila√ß√µes nos pre√ßos das a√ß√µes,\
                     eliminando varia√ß√µes que dificultam a identifica√ß√£o das tend√™ncias gerais, como aumento, queda ou estabilidade no pre√ßo.\
                     \n Al√©m disso, uma linha de tend√™ncia √© tra√ßada ajudando a identificar rapidamente a tend√™ncia das a√ß√µes.</div>", unsafe_allow_html=True)
        
        

    if visualizar and tipo == "Varia√ß√£o":
        st.subheader(f"Compara√ß√£o da Varia√ß√£o de pre√ßo das empresas - {empresa_selecionada} e {empresa_selecionada_2}", divider="blue")
        
        col1, col2 = st.columns(2)
        with col1:
            grafico_variacao = Grafico_linhas_values(variacao_perc1) #Gr√°fico de Varia√ß√£o Percentual (1¬™ empresa)
            grafico_variacao.update_layout(title=f"Varia√ß√£o Percentual da empresa {empresa_selecionada} ", 
                                yaxis_title="Varia√ß√£o Percentual", 
                                yaxis=dict(titlefont=dict(size=19), tickformat=",.2f"))
            grafico_variacao.update_traces( hovertemplate="Varia√ß√£o Percentual: %{y}%<br>Data: %{x} ")
            grafico_variacao.add_hline(y=0, line_color="white", line_width=1.5, line_dash="dash")
            st.markdown("<div style='font-size: 22px; font-weight: bold'>Identifique a varia√ß√£o percentual", unsafe_allow_html=True)
            st.plotly_chart(grafico_variacao, use_container_width=True)

        with col2:
            grafico_variacao2 = Grafico_linhas_values(variacao_perc2) #Gr√°fico de Varia√ß√£o Percentual (2¬™ empresa)
            grafico_variacao2.update_layout(title=f"Varia√ß√£o Percentual da empresa {empresa_selecionada_2}",    
                                yaxis_title="Varia√ß√£o Percentual", yaxis=dict(titlefont=dict(size=17), tickformat=",.2f"))
            grafico_variacao2.update_traces( hovertemplate="Varia√ß√£o Percentual: %{y}%<br>Data: %{x} ")
            grafico_variacao2.add_hline(y=0, line_color="white", line_width=1.5, line_dash="dash")
            st.markdown("<div style='font-size: 22px; font-weight: bold'>Identifique a varia√ß√£o percentual", unsafe_allow_html=True)
            st.plotly_chart(grafico_variacao2, use_container_width=True)  
        st.markdown("<div style='font-size: 35px; font-weight: bold; color: #07B8FB'>Compare facilmente a varia√ß√£o percentual", unsafe_allow_html=True)
        st.markdown("<hr style='border: 1px solid #07B8FB'>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 25px; font-weight: bold'>Identifique e compare facilmente a varia√ß√£o percentual.</div>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 22px; font-weight:serif'>Estes gr√°ficos mostram a varia√ß√£o percentual \
                            das a√ß√µes ao longo do tempo, ajudando a identificar rapidamente os momentos de picos\
                     e quedas acentuadas no valor das a√ß√µes.</div>", unsafe_allow_html=True)


    if visualizar and tipo == "Volume de Negocia√ß√µes":
        st.subheader(f"Compara√ß√£o do Volume de Negocia√ß√µes das empresas - {empresa_selecionada} e {empresa_selecionada_2}", divider="blue")
        
        col1, col2 = st.columns(2)
        with col1:
               #Atualiza√ß√£o dos Eixos e t√≠tulos
            grafico_volume = Grafico_barras(dados1, "Volume de Negocia√ß√µes")  #Gr√°fico de Volume (1¬™ empresa)
            grafico_volume.update_layout(title=f"Identifique per√≠odos de maior atividade na empresa {empresa_selecionada} ", yaxis_title="Volume de Negocia√ß√µes",
                                xaxis=dict(type="category"), yaxis=dict(titlefont=dict(size=17), tickformat=",.0f"))
            grafico_volume.update_traces(text="Volume de Negocia√ß√µes", textposition="none", hovertemplate="Volume de Negocia√ß√µes: %{y}<br>Data: %{x}")
            st.markdown(f"<div style='font-size: 22px; font-weight: bold'>Volume de Negocia√ß√µes da empresa: {empresa_selecionada}", unsafe_allow_html=True)
            st.plotly_chart(grafico_volume, use_container_width=True)

        with col2:
               #Atualiza√ß√£o dos Eixos e t√≠tulos
            grafico_volume2 = Grafico_barras(dados2, "Volume de Negocia√ß√µes")  #Gr√°fico de Volume (2¬™ empresa)
            grafico_volume2.update_layout(title=f"Identifique per√≠odos de maior atividade na empresa {empresa_selecionada_2} ", yaxis_title="Volume de Negocia√ß√µes",
                                        xaxis=dict(type="category"), yaxis=dict(titlefont=dict(size=17), tickformat=",.0f"))
            grafico_volume2.update_traces(text="Volume de Negocia√ß√µes", textposition="none", hovertemplate="Volume de Negocia√ß√µes: %{y}<br>Data: %{x}")
            st.markdown(f"<div style='font-size: 22px; font-weight: bold'>Volume de Negocia√ß√µes da empresa: {empresa_selecionada_2}", unsafe_allow_html=True)
            st.plotly_chart(grafico_volume2, use_container_width=True)              
        st.markdown("<div style='font-size: 35px; font-weight: bold; color: #07B8FB'>Identifique o volume de negocia√ß√µes", unsafe_allow_html=True)
        st.markdown("<hr style='border: 1px solid #07B8FB'>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 25px; font-weight: bold'>Identifique e compare facilmente o volume de negocia√ß√µes.</div>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 22px; font-weight: serif'>Isso ajuda a entender quais dias tiveram maior engajamento e atividade no mercado financeiro,\
                     destacando os momentos que podem ter sido influenciados por not√≠cias,eventos econ√¥micos ou decis√µes empresariais importantes.\
                    Utilize juntamente com as bandas de bollinger para decis√µes de investimento mais informadas e confi√°veis.</div>", unsafe_allow_html=True)
            
    elif visualizar and tipo == "Bandas de Bollinger":
        st.header(f"Compara√ß√£o das Bandas de Bollinger das empresas - {empresa_selecionada} e {empresa_selecionada_2}", divider="blue")
        col1, col2 = st.columns(2)
        with col1:
            grafico_bollinger = Grafico_bollinger(dados1) #Gr√°fico de Bandas de Bollinger (1¬™ empresa)
            st.markdown(f"<div style='font-size: 22px; font-weight: bold'>Bandas de Bollinger da empresa: {empresa_selecionada}", unsafe_allow_html=True)
            grafico_bollinger.update_layout(title=f"Identifique per√≠odos de maior atividade na empresa {empresa_selecionada} ", yaxis_title="Valor das A√ß√µes",
                                xaxis=dict(type="category"), yaxis=dict(titlefont=dict(size=17), tickformat=",.2f"))
            grafico_bollinger.update_traces(text="Valor das A√ß√µes", textposition="middle center", hovertemplate="Valor das A√ß√µes: %{y}<br>Data: %{x}")
            st.plotly_chart(grafico_bollinger, use_container_width=True)
        with col2:
            bollinger2 = Grafico_bollinger(dados2) #Gr√°fico de Bandas de Bollinger (2¬™ empresa)
            st.markdown(f"<div style='font-size: 22px; font-weight: bold'>Bandas de Bollinger da empresa: {empresa_selecionada_2}", unsafe_allow_html=True)
            bollinger2.update_layout(title=f"Identifique per√≠odos de maior atividade na empresa {empresa_selecionada_2} ", yaxis_title="Valor das A√ß√µes",
                                xaxis=dict(type="category"), yaxis=dict(titlefont=dict(size=17), tickformat=",.2f"))
            bollinger2.update_traces(text="Valor das A√ß√µes", textposition="middle center", hovertemplate="Valor das A√ß√µes: %{y}<br>Data: %{x}")
            st.plotly_chart(bollinger2, use_container_width=True)

        st.markdown("<div style='font-size: 35px; font-weight: bold; color: #07B8FB'>Identifique a volatilidade do mercado", unsafe_allow_html=True)
        st.markdown("<hr style='border: 1px solid #07B8FB'>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 25px; font-weight: bold'>Identifique e compare facilmente a volatilidade do mercado.</div>", unsafe_allow_html=True)
        st.markdown("<div style='font-size: 22px; font-weight: serif'>As Bandas de Bollinger ajudam a visualizar\
                    a faixa normal dos pre√ßos e a identificar quando os valores se afastam dessa faixa. Quando o pre√ßo toca \
                    a banda superior ou inferior, isso sinaliza momentos de sobrecompra ou sobrevenda, respectivamente,\
                     servindo como alerta para poss√≠veis revers√µes ou manuten√ß√£o de tend√™ncias.", unsafe_allow_html=True)

except Exception as erro:
    st.error(f"Ocorreu um erro, por favor, tente novamente.\nErro: {erro}", icon="üö®")
        
        